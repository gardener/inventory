---
version: v1alpha1
debug: false

# Logging configuration
logging:
  # Output format to use: [text|json]
  format: text
  # If set to true, the log events will contain the source code position of the
  # log statements.
  add_source: false
  # Log level: [info|warn|error|debug]
  level: info

  # An optional key/value map of attributes to add to each log event
  # attributes:
  #   landscape: dev

redis:
  endpoint: redis:6379

database:
  dsn: "postgresql://inventory:p4ssw0rd@postgres:5432/inventory?sslmode=disable"
  migration_dir: ./internal/pkg/migrations

worker:
  concurrency: 100

dashboard:
  address: ":8080"
  read_only: false
  prometheus_endpoint: http://prometheus:9090/

# Azure specific configuration
azure:
  # Setting `is_enabled' to false would not create any Azure clients, and as a
  # result Inventory will not process any of the Azure collection tasks.
  is_enabled: true

  # This section provides configuration specific to each Azure service and which
  # named credentials to be used when creating API clients for the respective
  # service. Inventory supports specifying multiple named credentials per
  # service, which means that collection will happen against each configured
  # named credential.
  #
  # For instance, if `compute' service specifies named credentials `foo' and
  # `bar', then Inventory will connect and collect Compute resources from the
  # Subscriptions and Resource Groups, for which `foo' and `bar' credentials
  # have access to.
  services:
    # Resource Manager API clients collect Subscriptions and Resource Groups.
    resource_manager:
      use_credentials:
        - foo
        - bar

    # Compute service API clients collect Virtual Machines.
    compute:
      use_credentials:
        - foo
        - bar

    # Network service API clients collect Public IP Addresses and LBs.
    network:
      use_credentials:
        - foo

    # Storage service API clients collect Storage Accounts and Blob containers 
    storage:
      use_credentials:
        - foo

  # The `credentials' section provides named credentials, which are used by the
  # various Azure services. The currently supported authentication mechanisms
  # are `default' and `workload_identity'.
  #
  # When using `default' as the authentication mechanism the API clients will be
  # initialized using the `DefaultAzureCredential' chain of credential providers [1].
  #
  # When using `workload_identity' the API clients will be configured to
  # authenticate using Workload Identity Federation [2]. For more details,
  # please refer to the docs/oidc-azure.md document.
  #
  # [1]: https://learn.microsoft.com/en-us/azure/developer/go/sdk/authentication-overview
  # [2]: https://learn.microsoft.com/en-us/entra/workload-id/workload-identity-federation
  credentials:
    foo:
      # Set to `default' for `DefaultAzureCredential` chain of providers
      authentication: default

    bar:
      # With `workload_identity' authentication the API client will be
      # configured to authenticate using Workload Identity Federation.
      authentication: workload_identity
      workload_identity:
        client_id: my-registered-app-uuid
        tenant_id: my-tenant-uuid
        token_file: /path/to/my-jwt-token.txt

# GCP specific configuration
gcp:
  # Setting `is_enabled' to false would not create API clients for GCP, and as a
  # result Inventory will not process any of the GCP collection tasks.
  is_enabled: true

  # User-Agent to set for the API clients
  user_agent: gardener-inventory/0.1.0

  # This section provides configuration specific to each GCP service and which
  # named credentials to be used when creating API clients for the respective
  # service. Inventory supports specifying multiple named credentials per
  # service, which means that collection will happen against each configured
  # named credential.
  #
  # For instance, if `compute' service specifies named credentials `foo' and
  # `bar', then Inventory will connect and collect Compute Resources from the
  # specified projects for the configured named credentials.
  services:
    # Resource Manager API clients collect only GCP Project resources.
    resource_manager:
      use_credentials:
        - foo
    # Compute API clients collect Instances, VPCs, Subnets, Regional & Global
    # Addresses, Disks and Forwarding Rules.
    compute:
      use_credentials:
        - foo
    # Storage API clients collect Buckets.
    storage:
      use_credentials:
        - foo

  # The `credentials' section provides named credentials, which are used by the
  # various GCP services. The currently supported authentication mechanisms are
  # `none' and `key_file'.
  #
  # When using `none' as the authentication mechanism the API clients will be
  # initialized using `Application Default Credentials' strategy [1].
  #
  # When using `key_file' the API client will be configured to authenticate
  # using the specified service account credentials file [2].
  #
  # [1]: https://cloud.google.com/docs/authentication/provide-credentials-adc
  # [2]: https://cloud.google.com/iam/docs/keys-create-delete
  credentials:
    foo:
      # Set to `none' for Application Default Configuration (ADC).
      authentication: none
      # List of project IDs from which to collect resources
      projects:
        - project-foo
        - project-bar

    bar:
      # With `key_file' authentication the API client will be configured to
      # authenticate using the specified service account JSON key file.
      authentication: key_file
      key_file:
        path: /path/to/serviceaccount.json
      projects:
        - project-baz
        - project-qux

  # Gardener specific GCP settings
  soil_regional_host:
  soil_regional_ca_path:

# AWS specific configuration
aws:
  # Setting `is_enabled' to false would not create API clients for AWS, and as a
  # result Inventory will not process any of the AWS collection tasks.
  is_enabled: true

  region: eu-central-1  # Frankfurt
  default_region: eu-central-1  # Frankfurt
  app_id: gardener-inventory  # Optional application specific identifier

  # This section provides configuration specific to each AWS service and which
  # named credentials are used for each service. This allows the Inventory to
  # connect to multiple AWS accounts based on the named credentials which are
  # used. Inventory will connect to all configured named credentials (accounts)
  # during collection from the respective AWS service.
  services:
    ec2:
      use_credentials:
        - default
        - account-foo
        - account-bar
    elb:
      use_credentials:
        - default
        - account-foo
    elbv2:
      use_credentials:
        - default
    s3:
      use_credentials:
        - default
        - account-bar

  # The `credentials' section provides named credentials, which are used by the
  # various AWS services. The currently supported token retrievers are `none',
  # `kube_sa_token' and `token_file'. See docs/oidc-aws.md for more details.
  credentials:
    default:
      # When using `none' as the token retriever, only the shared AWS
      # credentials file is used.
      token_retriever: none

    account-foo:
      # Example configuration for `kube_sa_token' retriever. When using this
      # token retriever the Inventory will request a Kubernetes Service Account
      # token using the specified kubeconfig, which is then exchanged for
      # temporary security credentials via the AWS STS service.  It is expected
      # that OIDC Trust is already established between Inventory and AWS when
      # using this token retriever.
      token_retriever: kube_sa_token
      kube_sa_token:
        kubeconfig: /path/to/kubeconfig
        namespace: inventory
        service_account: worker
        duration: 30m
        audiences:
          - iaas-aws-dev
        role_arn: arn:aws:iam::account:role/gardener-inventory-dev
        role_session_name: gardener-inventory-worker

    account-bar:
      # Example configuration for `token_file' retriever. When using this token
      # retriever the Inventory will exchange the token contained within the
      # specified file for temporary security credentials via the AWS STS
      # service. It is expected that OIDC Trust is already established between
      # Inventory and AWS when using this token retriever.
      token_retriever: token_file
      token_file:
        path: /path/to/identity/token
        duration: 30m
        role_arn: arn:aws:iam::account:role/name
        role_session_name: gardener-inventory-worker

scheduler:
  jobs:
    # AWS tasks
    - name: "aws:task:collect-regions"
      spec: "@every 1h"
      desc: "Collect AWS Regions"
    - name: "aws:task:collect-azs"
      spec: "@every 1h"
      desc: "Collect AWS AZs"
    - name: "aws:task:collect-vpcs"
      spec: "@every 1h"
      desc: "Collect AWS VPCs"
    - name: "aws:task:collect-subnets"
      spec: "@every 1h"
      desc: "Collect AWS Subnets"
    - name: "aws:task:collect-instances"
      spec: "@every 1h"
      desc: "Collect AWS EC2 Instances"
    - name: "aws:task:collect-images"
      spec: "@every 1h"
      desc: "Collect AWS AMIs"
      payload: >-
        owners:
          - 0123456789012
    - name: "aws:task:collect-loadbalancers"
      spec: "@every 24h"
      desc: "Collect AWS LoadBalancers"
    - name: "aws:task:collect-buckets"
      spec: "@every 24h"
      desc: "Collect AWS S3 Buckets"
    - name: "aws:task:collect-net-interfaces"
      spec: "@every 1h"
      desc: "Collect AWS Network Interfaces"
    - name: "aws:task:link-all"
      spec: "@every 30m"
      desc: "Link all AWS models"

    # Gardener tasks
    - name: "g:task:collect-projects"
      spec: "@every 1h"
      desc: "Collect Gardener Projects"
    - name: "g:task:collect-seeds"
      spec: "@every 1h"
      desc: "Collect Gardener Seeds"
    - name: "g:task:collect-shoots"
      spec: "@every 1h"
      desc: "Collect Gardener Shoots"
    - name: "g:task:collect-machines"
      spec: "@every 1h"
      desc: "Collect Gardener Machines"
    - name: "g:task:collect-backup-buckets"
      spec: "@every 1h"
      desc: "Collect Gardener BackupBuckets"
    - name: "g:task:collect-cloud-profiles"
      spec: "@every 1h"
      desc: "Collect Gardener CloudProfiles"
    - name: "g:task:link-all"
      spec: "@every 30m"
      desc: "Link all Gardener models"

    # GCP tasks
    - name: "gcp:task:collect-projects"
      spec: "@every 1h"
      desc: "Collect GCP Projects"
    - name: "gcp:task:collect-instances"
      spec: "@every 1h"
      desc: "Collect GCP Instances"
    - name: "gcp:task:collect-vpcs"
      spec: "@every 1h"
      desc: "Collect GCP VPCs"
    - name: "gcp:task:collect-addresses"
      spec: "@every 1h"
      desc: "Collect GCP Addresses"
    - name: "gcp:task:collect-subnets"
      spec: "@every 1h"
      desc: "Collect GCP Subnets"
    - name: "gcp:task:collect-buckets"
      spec: "@every 1h"
      desc: "Collect GCP Buckets"
    - name: "gcp:task:collect-forwarding-rules"
      spec: "@every 1h"
      desc: "Collect GCP Forwarding Rules"
    - name: "gcp:task:link-all"
      spec: "@every 30m"
      desc: "Link all GCP models"

    # Azure tasks
    - name: "az:task:collect-subscriptions"
      spec: "@every 1h"
      desc: "Collect Azure Subscriptions"
    - name: "az:task:collect-resource-groups"
      spec: "@every 1h"
      desc: "Collect Azure Resource Groups"
    - name: "az:task:collect-vms"
      spec: "@every 1h"
      desc: "Collect Azure Virtual Machines"
    - name: "az:task:collect-public-addresses"
      spec: "@every 1h"
      desc: "Collect Azure Public IP Addresses"
    - name: "az:task:collect-loadbalancers"
      spec: "@every 1h"
      desc: "Collect Azure Load Balancers"
    - name: "az:task:collect-vpcs"
      spec: "@every 1h"
      desc: "Collect Azure VPCs"
    - name: "az:task:collect-subnets"
      spec: "@every 1h"
      desc: "Collect Azure Subnets"
    - name: "az:task:collect-storage-accounts"
      spec: "@every 1h"
      desc: "Collect Azure Storage Accounts"
    - name: "az:task:collect-blob-containers"
      spec: "@every 1h"
      desc: "Collect Azure Blob containers"

    # The housekeeper takes care of cleaning up stale records
    - name: "common:task:housekeeper"
      spec: "@every 12h"
      payload: >-
        retention:
          # AWS
          - name: "aws:model:region"
            duration: 24h
          - name: "aws:model:az"
            duration: 24h
          - name: "aws:model:vpc"
            duration: 24h
          - name: "aws:model:subnet"
            duration: 24h
          - name: "aws:model:instance"
            duration: 24h
          - name: "aws:model:image"
            duration: 24h
          - name: "aws:model:bucket"
            duration: 24h
          - name: "aws:model:loadbalancer"
            duration: 24h
          - name: "aws:model:network_interface"
            duration: 24h
          # Gardener
          - name: "g:model:project"
            duration: 24h
          - name: "g:model:seed"
            duration: 24h
          - name: "g:model:shoot"
            duration: 24h
          - name: "g:model:machine"
            duration: 24h
          - name: "g:model:backup_bucket"
            duration: 24h
          - name: "g:model:cloud_profile"
            duration: 24h
          - name: "g:model:cloud_profile_aws_image"
            duration: 24h
          - name: "g:model:cloud_profile_gcp_image"
            duration: 24h
          - name: "g:model:cloud_profile_azure_image"
            duration: 24h
          # GCP
          - name: "gcp:model:project"
            duration: 24h
          - name: "gcp:model:instance"
            duration: 24h
          - name: "gcp:model:vpc"
            duration: 24h
          - name: "gcp:model:address"
            duration: 24h
          - name: "gcp:model:nic"
            duration: 24h
          - name: "gcp:model:subnet"
            duration: 24h
          - name: "gcp:model:bucket"
            duration: 24h
          - name: "gcp:model:forwarding_rule"
            duration: 24h
          # Azure
          - name: "az:model:subscription"
            duration: 24h
          - name: "az:model:resource_group"
            duration: 24h
          - name: "az:model:vm"
            duration: 24h
          - name: "az:model:public_address"
            duration: 24h
          - name: "az:model:loadbalancer"
            duration: 24h
          - name: "az:model:vpc"
            duration: 24h
          - name: "az:model:subnet"
            duration: 24h
          - name: "az:model:storage_account"
            duration: 24h
          - name: "az:model:blob_container"
            duration: 24h

virtual_garden:
  # Path to token for Virtual Garden cluster authentication
  token_path:

  # Path to Virtual Garden kubeconfig
  kubeconfig:

  # Environment type (dev, staging, canary, live)
  environment: dev

  # The list of excluded seeds specifies seed cluster names, from which
  # collection will be skipped.
  excluded_seeds:
    - seed-a
    - seed-b
