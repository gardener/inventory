---
x-postgres:
  uri: &postgres-uri 'postgresql://inventory:p4ssw0rd@postgres:5432/inventory?sslmode=disable'
  user: &postgres-user inventory
  password: &postgres-password 'p4ssw0rd'
  db_name: &postgres-db-name inventory
  port: &postgres-port 5432

x-redis:
  endpoint: &redis-endpoint 'redis:6379'

services:
  postgres:
    ports:
      - 5432:5432
    image: postgres:16.2-bookworm
    environment:
      POSTGRES_USER: *postgres-user
      POSTGRES_PASSWORD: *postgres-password
      POSTGRES_DB: *postgres-db-name
    volumes:
      - ./dev/local/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "--username", *postgres-user]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    ports:
      - 6379:6379
    image: redis:7.2.5-bookworm
    volumes:
      - ./dev/local/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: ["/app/inventory", "worker", "start"]
    hostname: inventory-worker-1
    healthcheck:
      test: ["CMD", "/app/inventory", "worker", "ping", "--name", "inventory-worker-1"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      KUBECONFIG: /home/nonroot/.kube/config
      KUBECACHEDIR: /home/nonroot/.kube/cache
      AWS_CONFIG_FILE: /home/nonroot/.aws/config
      AWS_SHARED_CREDENTIALS_FILE: /home/nonroot/.aws/credentials
      AWS_PROFILE: default
      CLOUDSDK_CONFIG: /home/nonroot/.config/gcloud
      INVENTORY_CONFIG: /home/nonroot/config.yaml
      REDIS_ENDPOINT: *redis-endpoint
      DATABASE_URI: *postgres-uri
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ~/.aws:/home/nonroot/.aws
      - ~/.kube/cache:/home/nonroot/.kube/cache
      - ${KUBECONFIG}:/home/nonroot/.kube/config
      - ./examples/config.yaml:/home/nonroot/config.yaml
      - ~/.config/gcloud:/home/nonroot/.config/gcloud

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: ["/app/inventory", "scheduler", "start"]
    environment:
      INVENTORY_CONFIG: /home/nonroot/config.yaml
      REDIS_ENDPOINT: *redis-endpoint
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./examples/config.yaml:/home/nonroot/config.yaml

  dashboard:
    ports:
      - 8080:8080
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: ["/app/inventory", "dashboard", "start"]
    environment:
      INVENTORY_CONFIG: /home/nonroot/config.yaml
      REDIS_ENDPOINT: *redis-endpoint
      PROMETHEUS_ENDPOINT: http://prometheus:9090/
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./examples/config.yaml:/home/nonroot/config.yaml

  grafana:
    image: grafana/grafana:11.0.0-ubuntu
    ports:
      - 3000:3000
    healthcheck:
      test: curl --fail -I http://localhost:3000/api/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./extra/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./extra/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./extra/grafana/dashboards:/var/lib/grafana/dashboards
      - ./extra/grafana/config/grafana.ini:/etc/grafana/grafana.ini

  prometheus:
    image: prom/prometheus:v2.52.0
    ports:
      - 9090:9090
    depends_on:
      dashboard:
        condition: service_started
    volumes:
      - ./extra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./dev/local/prometheus:/prometheus

  pgadmin:
    image: dpage/pgadmin4:8.8
    ports:
      - 7080:80
    environment:
      PGADMIN_DEFAULT_PASSWORD: p4ssw0rd
      PGADMIN_DEFAULT_EMAIL: inventory@foo.bar
      PGADMIN_DISABLE_POSTFIX: true
    depends_on:
      postgres:
        condition: service_healthy
